function format(tpl,args){if(!args||!args.length){return tpl}return tpl.replace(/\$\{(\d+)\}/g,(all,index)=>args[index])}let localesConf;function localize({namespace:namespace,key:key},...args){if(!namespace){return format(localesConf[key],args)}if(!localesConf[namespace]){console.warn(`locales resource namespace empty: ${namespace}`);return""}return format(localesConf[namespace][key],args)}function isObject(value){return Object.prototype.toString.call(value)==="[object Object]"}function isArray(value){return Object.prototype.toString.call(value)==="[object Array]"}function isString(value){return Object.prototype.toString.call(value)==="[object String]"}function localizeItem(item,namespace){if(isString(item)){return item.replace(/\{\{(.+)\}\}/g,(all,key)=>localize({key:key,namespace:namespace}))}if(isObject(item)){Object.keys(item).forEach(k=>{let subItem=item[k];item[k]=localizeItem(subItem,namespace)});return item}if(isArray(item)){return item.map(subItem=>localizeItem(subItem,namespace))}return item}module.exports={init(config){if(localesConf){return}localesConf=config},set(namespace,config){if(!namespace){return}localesConf=localesConf||{};localesConf[namespace]=config},get(namespace){return namespace?localesConf[namespace]:localesConf},getLocalize(namespace){return(key,...args)=>localize({namespace:namespace,key:key},...args)},jsonLocalize(namespace,config){if(!config){config=namespace;namespace=""}if(isString(config)){try{config=JSON.parse(config)}catch(e){console.log(e)}}return localizeItem(config,namespace)}};
